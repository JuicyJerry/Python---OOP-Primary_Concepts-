Q1. 다음 주 캡슐화에 대해서 옳지 않은 내용은?
1. 캡슐화를 하면 객체의 속성과 행동을 외부에서 접근할 수 없게 막을 수 있다.
2. 외부로부터의 접근을 막은 변수는 getter 메소드로 값을 가져오고 setter 메소드로 값을 설정한다.
3. 파이썬에서는 @property 데코레이터로도 캡슐화를 할 수 없다.
4. 파이썬에서는 변수 이름 앞에 밑줄 두 개 (__)를 붙이면 외부로부터의 접근을 완벽하게 막을 수 있다.
5. 변수뿐만 아니라 메소드도 캡슐화할 수 있다.

정답: 4
밑줄 두 개(__)를 변수의 이름 앞에 붙이면 그 변수의 이름은 네임 맹글링(name mangling)됩니다. 그리고 네임 맹글링된 후의
새 이름을 사용하면 외부로부터 그 변수에 접근할 수 있기 때문에 완벽하게 접을을 막을 수 있는 건 아닙니다.

Q2. 캡슐화를 적용하지 않으면 일어날 수 있는 상황들을 모두 고르시오.
1. 비슷한 코드를 반복적으로 써야해서 코드를 읽기가 불편하고 효율적이지 않다.
2. 객체의 속성값이 예상치 못하게 바뀌어서 프로그램이 예상돼로 작동하지 않을 수 있다.
3. 내가 만든 클래스를 더 안전하게 사용하도록 할 수 있다.
4. 밖으로 노출되면 안 되는 객체의 속성을 다른 개발자가 볼 수 있다.
5. 프로그램의 전체적인 안정성과 유지보수성이 좋아진다.

정답:  2, 4
캡슐화를 적용하면 민감한 정보를 외부에 노출하지 않을 수 있고 객체 내부의 속성을 항상 안정적으로 유지할 수 있습니다.
캡슐화를 적용하지 않으면 반대의 상황들이 발생하겠죠?

Q3. 아래 보기들은 캡슐화를 적용한 클래스의 인스턴스를 사용하는 예입니다. 다음 중 데코레이터를 이용해서 캡슐화를
올바르게 적용한 보기는 무엇일까요?

1.
client = Client("김대위", "5월 13일", "010-1234-1234")

print(client.name)
print(client.birthday)
print(client.phone_number)

2.
client = Client("김대위", "5월 13일", "010-1234-1234")

print(client.get_name())
print(client.get_birthday())
print(client.get_phone_number())

3.
client = Client("김대위", "5월 13일", "010-1234-1234")

print(client.set_name("성대호"))
print(client.set_birthday("2월 19일"))
print(client.set_phone_number("010-2039-4039"))

4.
client = Client("김대위", "5월 13일", "010-1234-1234")

print(client.name())
print(client.birthday())
print(client.phone_number())

정답: 1
