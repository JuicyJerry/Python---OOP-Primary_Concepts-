SOLID 원칙 중 마지막 원칙인 의존 관계 역전 원칙(Dependency Inversion Principle)을 정리해보겠습니다.
의존 관계 역전 원칙의 정의는
"상위 모듈은 하위 모듈의 구현 내용에 의존하면 안 된다. 상위 모듈과 하위 모듈 모두 추상화된 내용에 의존해야 한다."
입니다.


여기서 상위 모듈이란 다른 클래스를 사용하는 주된 클래스, 하위 모듈은 사용되는 클래스를 나타낸다고 생각하면 됩니다. 상위 모듈은 보통 프로그램의 메인 흐름에 좀더 가깝고 하위 모듈은 상대적으로 좀더 멀리 있습니다.


의존 관계 역전 원칙은 상위 모듈이 하위 모듈을 사용할 때 직접 인스턴스를 가져다가 쓰지 말라는 뜻입니다. 왜냐하면 인스턴스를 바로 가져다가 쓴다는 말은 하위 모듈의 구체적인 내용에 상위 모듈이 의존하게 되어 하위 모듈에 변화가 있을 때마다 상위 모듈의 코드를 자주 바꿔줘야 하기 때문입니다. 이에 대한 해결책은  추상 클래스로 상위 모듈과 하위 모듈 사이에 추상화 레이어를 만드는 것입니다. 이렇게 되면


1. 상위 모듈에는 추상 클래스의 자식 클래스의 인스턴스를 사용한다는 가정 하에 그 하위 모듈을 사용하는 코드를 작성해두면 되고,
2. 하위 모듈은 추상 클래스의 추상 메소드들을 구현(오버라이딩)만 하면 됩니다.

그럼 상위 모듈은 새로운 하위 모듈이 생겨도 기존 코드를 수정하지 않고 새 하위 모듈을 자유롭게 가져다 쓸 수 있습니다. 그만큼 코드를 유지보수하기 편해지는 것이죠. 어, 그런데 이 내용 뭔가 한번 봤던 것 같지 않나요? 바로 개방-폐쇄 원칙(Open-closed Principle)에서 배웠던 내용입니다.


클래스의 기존 기능을 확장하면서 기존 코드를 수정하지 않아도 되는 상태, 기억나시죠? 사실, 이 의존 관계 역전 원칙은 개방-폐쇄 원칙을 지키는 하나의 방법입니다. 두 원칙 사이에 이런 관계가 있었다니 신기하죠? SOLID 원칙은 이렇게 각각이 별도의 것이 아니라 서로 긴밀한 관계를 갖고 있습니다.


#
의존 관계 역전 원칙을 지키지 않으면 하위 모듈에 문제가 생길 때 상위 모듈에도 문제가 발생하지만 그 반대는 성립하지 않는다.
