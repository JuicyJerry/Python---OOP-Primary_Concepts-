"""아래는 이전 노트에서 봤던 주행 시뮬레이터가 갖춰야 할 조건들입니다.


여러 가지 교통 수단들(자전거, 일반 자동차, 스포츠카 등)을 가질 수 있습니다.
갖고 있는 교통 수단들의 주행을 동시에 시작/정지시킬 수 있습니다.
갖고 있는 교통 수단들의 현재 속도를 문자열 메시지로 볼 수 있습니다.

첫 번째 조건을 보니 주행 시뮬레이터를 만들려면 일단 각 교통 수단을 나타내는 클래스가 필요할 것 같네요. 일단 첫 번째
조건에 제시된


자전거
일반 자동차
스포츠카

를 나타낼 3가지 클래스를 만들어야 합니다. 그런데 이 3가지 클래스에 다형성을 적용하고 싶은데요.
다형성을 적용하기 위해서는 추상 클래스가 필요하겠죠? 이 3가지 클래스의 공통점을 묶어서 추상 클래스로 만들면 다형성을
적용할 수 있습니다.
3가지 클래스의 공통점은 뭘까요? 바로 "교통 수단"이라는 점입니다.
"교통 수단"을 나타내는 추상 클래스를 만들면 되는데요. Vehicle이라는 이름으로 추상 클래스를 만들어보겠습니다.
Vehicle 클래스는 어떤 메소드를 가져야할까요? 주행 시뮬레이터가 갖춰야할 두 번째 조건과 세 번째 조건을 보면 알 수 있는데요.
과제를 풀기 위해 필요한 조건을 직접 설명해드리자면,


주행 시작 메소드(start) -> 추상 메소드로 정의하세요
주행 정지 메소드(stop) -> 일반 메소드로 정의하세요
자식 클래스가 속도를 나타내는 변수 _speed를 갖도록 유도하는 추상 getter 메소드(speed) -> "힌트 2"를 참조하세요!

지금 메소드 이름을 괄호 안에 제시해두었습니다. 괄호 안에 있는 이름으로 Vehicle 추상 클래스의 메소드를 정의해보세요.
결국 Vehicle 클래스를 기준으로 다형성을 적용하려면,


Vehicle 추상 클래스를 만들고
실제 교통 수단을 나타내는 3가지 일반 클래스(자전거, 일반 자동차, 스포츠카)가 Vehicle 클래스를 상속받은 후,
상 메소드를 오버라이딩하면 됩니다.

일단 이번 과제에서는 Vehicle 추상 클래스만 만들어봅시다.


이때, 주행 정지 메소드(stop)는 추상 메소드가 아니라 구현 내용이 있는 일반 메소드로로 정의해보세요! stop 메소드는
변수 _speed의 값을 0으로 설정하는 내용을 가지면 됩니다."""
from abc import ABC, abstractmethod

class Vehicle(ABC):
    @abstractmethod
    #def start_all_vehicles(self, start):
    def start(self, start):
    # 주행 시작 / 추상 메소드로 정의하세요
        pass

    @property
    @abstractmethod
    def speed(self, speed):
    # 자식 클래스가 속도를 나타내는 변수 _speed를 갖도록 유도하는 추상 getter 메소드(speed)
        pass

    # def stop_all_vehicles(self, stop):
    def stop(self, stop):
        self.speed = 0
    # 주행 정지 / 일반 메소드로 정의하세요

print(Vehicle.mro())
print(dir(Vehicle))
